<?php
/**
 * @file
 * Bibliographic work management for the semantic web using the Bibliographic Ontology Specification.
 */

/**
 * Implements hook_entity_info().
 */
function bibo_entity_info() {
  $entity_info = array();

  // Contributor entity information.
  $entity_info['bibo_contributor'] = array(
    // Human-readable label and description.
    'label' => t('Contributor'),
    'plural label' => t('Contributors'),
    'description' => t('Contributor to a bibliographic work.'),
    // Database table and keys.
    'base table' => 'bibo_contributor',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'bibo_contributor_id',
      'bundle' => 'type',
      'label' => 'name',
    ),
    'module' => 'bibo',
    // Bundles.
    'bundles' => array(
      'person' => array(
        'label' => t('Person'),
        'admin' => array(
          'path' => 'admin/people/contributor/person',
          'bundle argument' => 3,
          'access arguments' => array('administer bibo_contributors'),
        ),
      ),
      'organization' => array(
        'label' => t('Organization'),
        'admin' => array(
          'path' => 'admin/people/contributor/organization',
          'bundle argument' => 3,
          'access arguments' => array('administer bibo_contributors'),
        ),
      ),
    ),
    // Callbacks.
    'access callback' => 'bibo_contributor_access',
    'label callback' => 'bibo_contributor_label',
    'uri callback' => 'entity_class_uri',
    // Entity and controller classes.
    'entity class' => 'BIBOContributor',
    'controller class' => 'BIBOContributorController',
    'metadata controller class' => 'BIBOContributorMetadataController',
    'views controller class' => 'BIBOContributorViewsController',
    // Administration UI.
    'admin ui' => array(
      'path' => 'admin/people/contributor',
      'controller class' => 'BIBOContributorUIController',
      'menu wildcard' => '%bibo_contributor',
    ),
  );

  // Work entity information.
  $entity_info['bibo_work'] = array(
    // Human-readable label and description.
    'label' => t('Work'),
    'plural label' => t('Works'),
    'description' => t('Work published in an academic journal, presented at a conference, etc.'),
    // Database table and keys.
    'base table' => 'bibo_work',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'bibo_work_id',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'module' => 'bibo',
    // Bundles.
    'bundles' => array(),
    'bundle keys' => array('bundle' => 'type'),
    // View modes
    'view modes' => array(
      'default' => array(
        'label' => t('Default'),
        'custom settings' => TRUE,
      ),
      'apa' => array(
        'label' => t('APA reference'),
        'custom settings' => FALSE,
      ),
    ),
    // Callbacks.
    'access callback' => 'bibo_work_access',
    'label callback' => 'bibo_work_label',
    'uri callback' => 'entity_class_uri',
    // Entity and controller classes.
    'entity class' => 'BIBOWork',
    'controller class' => 'BIBOWorkController',
    'metadata controller class' => 'BIBOWorkMetadataController',
    'views controller class' => 'BIBOWorkViewsController',
    // Administration UI.
    'admin ui' => array(
      'path' => 'admin/content/work',
      'controller class' => 'BIBOWorkUIController',
      'menu wildcard' => '%bibo_work',
    ),
  );

  // Work type entity information.
  $entity_info['bibo_work_type'] = array(
    // Human-readable label and description.
    'label' => t('Work type'),
    'plural label' => t('Work types'),
    'description' => t('Types of work (book, journal article, etc).'),
    // Database table and keys.
    'base table' => 'bibo_work_type',
    'fieldable' => FALSE,
    'bundle of' => 'bibo_work',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'bibo_work_type_id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'bibo',
    // Callbacks.
    'access callback' => 'bibo_work_type_access',
    'label callback' => 'bibo_work_type_label',
    // Entity and controller classes.
    'entity class' => 'BIBOWorkType',
    'controller class' => 'BIBOWorkTypeController',
    // Administration UI.
    'admin ui' => array(
      'path' => 'admin/structure/work_types',
      'controller class' => 'BIBOWorkTypeUIController',
      'menu wildcard' => '%bibo_work_type',
    ),
  );

  return $entity_info;
}

/**
 * Implements hook_entity_info_alter().
 */
function bibo_entity_info_alter(&$entity_info) {
  // Work bundles information.
  foreach (_bibo_get_work_types() as $type => $info) {
    $entity_info['bibo_work']['bundles'][$type] = array(
      'label' => $info->label,
      'description' => $info->description,
      'admin' => array(
        'path' => 'admin/structure/work_types/manage/%bibo_work_type',
        'real path' => 'admin/structure/work_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer work_types'),
      ),
    );
  }
}

/**
 * Implement hook_menu().
 */
function bibo_menu() {
  // Autocomplete bibo_contribution.
  $items['bibo_contribution/autocomplete'] = array(
    'title' => 'Contribution autocomplete',
    'page callback' => 'bibo_contribution_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('view any bibo_contributor'),
    'type' => MENU_CALLBACK,
  );

  // Autocomplete bibo_place.
  $items['bibo_place/autocomplete'] = array(
    'title' => 'Place autocomplete',
    'page callback' => 'bibo_place_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('view any bibo_work'),
    'type' => MENU_CALLBACK,
  );

  // Autocomplete bibo_publisher.
  $items['bibo_publisher/autocomplete/%'] = array(
    'title' => 'Place autocomplete',
    'page callback' => 'bibo_publisher_autocomplete',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('view any bibo_work'),
    'type' => MENU_CALLBACK,
  );

  // Autocomplete bibo_secondary_title.
  $items['bibo_secondary_title/autocomplete/%'] = array(
    'title' => 'Secondary title autocomplete',
    'page callback' => 'bibo_secondary_title_autocomplete',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('view any bibo_work'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function bibo_menu_alter(&$items) {
  // Hide Manage fields / Manage display on Contributors overview page.
  $items['admin/people/contributor/organization/fields']['type'] = MENU_CALLBACK;
  $items['admin/people/contributor/organization/display']['type'] = MENU_CALLBACK;
  $items['admin/people/contributor/person/fields']['type'] = MENU_CALLBACK;
  $items['admin/people/contributor/person/display']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_permission().
 */
function bibo_permission() {
  $permissions = array(
    // Contributor permissions.
    'administer bibo_contributors' => array(
      'title' => t('Administer contributors'),
      'description' => t('Edit and delete all contributors and their fields.'),
    ),
    'edit any bibo_contributor' => array(
      'title' => t('Edit any contributor.'),
    ),
    'view any bibo_contributor' => array(
      'title' => t('View any contributor.'),
    ),
    // Work permissions.
    'administer bibo_works' => array(
      'title' => t('Administer works'),
      'description' => t('Edit and delete all works.'),
    ),
    'view any bibo_work' => array(
      'title' => t('View any work'),
      'description' => t('View any work.'),
    ),
    // Work type permissions.
    'administer bibo_work_types' => array(
      'title' => t('Administer work types'),
      'description' => t('Edit and delete all work types and their fields.'),
    ),
  );

  // Generate permissions for individual work types.
  foreach (_bibo_get_work_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name bibo_work" => array(
        'title' => t('%type_name: Edit any work', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_admin_paths().
 */
function bibo_admin_paths() {
  // Use administration theme on contributor 'Merge' tab.
  $paths = array(
    'contributor/*/merge' => TRUE,
  );

  return $paths;
}

/**
 * Autocomplete callback for bibo_contribution field.
 */
function bibo_contribution_autocomplete($string = '') {
  $suggestions = array();

  // Find matching contributor.
  $query = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'bibo_contributor')
    ->propertyCondition('name', $string . '%', 'LIKE')
    ->propertyOrderBy('name', 'ASC')
    ->range(0, 10)
    ->execute();
  if (isset($result['bibo_contributor'])) {
    $ids = array_keys($result['bibo_contributor']);
    $entities = entity_load('bibo_contributor', $ids);
    foreach ($entities as $entity) {
      $key = bibo_contributor_label($entity) . ' [' . $entity->bibo_contributor_id . ']';
      $suggestions[$key] = $key;
    }
  }
  drupal_json_output($suggestions);
}

/**
 * Validation callback to process autocomplete result.
 */
function bibo_contribution_autocomplete_validate($element, &$form_state, $form) {
  $id = '';
  if (!empty($element['#value'])) {
    // Match bibo_contributor_id from square bracket in "Name [id]".
    if (preg_match("/.+\[(\d+)\]/", $element['#value'], $matches)) {
      $id = $matches[1];
    }
    // Find or create contributor from provided name value.
    else {
      $ids = _bibo_contributor_find_or_create($element['#value']);
      if (count($ids) > 1) {
        // Found many contributors, we need exactly one.
        form_error($element, t('Multiple contributors match the specified name. Please select one from the autocomplete suggestions.'));
      }
      else if ($id = reset($ids)) {
        // Update form_state value with created contributor id.
        drupal_array_set_nested_value($form_state['input'], $element['#parents'], $element['#value'] . ' [' . $id . ']');
      }
      else {
        form_error($element, t('Could not create contributor %name.', array('%name' => $element['#value'])));
      }
    }
  }
  // Update the value of this element so the field can validate bibo_contributor_id.
  form_set_value($element, $id, $form_state);
}

/**
 * Autocomplete callback for bibo_place field.
 */
function bibo_place_autocomplete($string = '') {
  $suggestions = array();

  // Find matching place.
  $results = db_select('field_data_bibo_place', 'p')
    ->fields('p', array('bibo_place_value'))
    ->condition('bibo_place_value', '%' . db_like($string) . '%', 'LIKE')
    ->range(0,10)
    ->execute();
  foreach ($results as $result) {
    $suggestions[$result->bibo_place_value] = $result->bibo_place_value;
  }

  drupal_json_output($suggestions);
}

/**
 * Autocomplete callback for bibo_publisher field.
 */
function bibo_publisher_autocomplete($bundle, $string = '') {
  $suggestions = array();
  $bundles = array();

  // Group publisher suggestions for certain work types.
  switch ($bundle) {
    case 'book':
    case 'book_section':
    case 'conference_paper':
      $bundles = array('book', 'book_section', 'conference_paper');
      break;

    default:
      $bundles = array($bundle);
  }

  // Find matching publishers.
  $results = db_select('field_data_bibo_publisher', 'p')
    ->fields('p', array('bibo_publisher_value'))
    ->condition('bundle', $bundles, 'IN')
    ->condition('bibo_publisher_value', '%' . db_like($string) . '%', 'LIKE')
    ->range(0,10)
    ->execute();
  foreach ($results as $result) {
    $suggestions[$result->bibo_publisher_value] = $result->bibo_publisher_value;
  }

  drupal_json_output($suggestions);
}

/**
 * Autocomplete callback for bibo_secondary_title field.
 */
function bibo_secondary_title_autocomplete($bundle, $string = '') {
  $suggestions = array();

  // Find matching secondary_title.
  $results = db_select('field_data_bibo_secondary_title', 't')
    ->fields('t', array('bibo_secondary_title_value'))
    ->condition('bundle', $bundle, '=')
    ->condition('bibo_secondary_title_value', '%' . db_like($string) . '%', 'LIKE')
    ->range(0,10)
    ->execute();
  foreach ($results as $result) {
    $suggestions[$result->bibo_secondary_title_value] = $result->bibo_secondary_title_value;
  }

  drupal_json_output($suggestions);
}

/**
 * Implements hook_field_info().
 */
function bibo_field_info() {
  $field_info = array();

  // Contribution field information.
  $field_info['bibo_contribution'] = array(
    'label' => t('BIBO Contribution'),
    'description' => t('Contributor reference with a specific role.'),
    'settings' => array(),
    'instance_settings' => array(
      'allowed_roles' => array(
        'author' => 'author',
      ),
    ),
    'default_widget' => 'bibo_contribution_widget_default',
    'default_formatter' => 'bibo_contribution_formatter_default',
  );

  // Publication status field information.
  $field_info['bibo_publication_status'] = array(
    'label' => t('BIBO Publication status'),
    'description' => t('Work publication status and partial date field.'),
    'settings' => array(
      'year_range' => array(
        'minimum' => date('Y') - 20,
        'maximum' => date('Y') + 3,
      ),
    ),
    'instance_settings' => array(
      'allowed_statuses' => array(
        'published' => 'published',
        'unpublished' => 'unpublished',
      ),
    ),
    'default_widget' => 'bibo_publication_status_widget_default',
    'default_formatter' => 'bibo_publication_status_formatter_default',
  );

  return $field_info;
}

/**
 * Implements hook_field_is_empty().
 */
function bibo_field_is_empty($item, $field) {
  // Contribution field empty check.
  if ($field['type'] == 'bibo_contribution') {
    if (sizeof($item['bibo_contribution']) > sizeof(array_filter($item['bibo_contribution']))) {
      return TRUE;
    }
    return FALSE;
  }

  // Publication status field empty check.
  if ($field['type'] == 'bibo_publication_status') {
    if (empty($item['bibo_publication_status']['status'])) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Implements hook_field_validate().
 */
function bibo_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Validate contribution field.
  if ($field['type'] == 'bibo_contribution') {
    foreach ($items as $delta => $item) {
      if (!bibo_field_is_empty($item, $field)) {
        // Validate existing bibo_contributor_id.
        $id = $item['bibo_contribution']['bibo_contributor_id'];
        if (empty(entity_load('bibo_contributor', array($id)))) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'bibo_contribution_invalid_id',
            'message' => t('%name: contributor does not exist (%id).', array(
              '%name' => $instance['label'],
              '%id' => $id,
            )),
          );
        }
        // Validate allowed bibo_contributor_role.
        $role = $item['bibo_contribution']['bibo_contribution_role'];
        if (empty($instance['settings']['allowed_roles'][$role])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'bibo_contribution_invalid_role',
            'message' => t('%name: contribution role is not allowed (%role).', array(
              '%name' => $instance['label'],
              '%role' => $role,
            )),
          );
        }
      }
    }
  }

  // Validate Publication status field.
  if ($field['type'] == 'bibo_publication_status') {
    foreach ($items as $delta => $item) {
      // If field is not considered empty, validate its data.
      if (!bibo_field_is_empty($item, $field)) {
        // Validate publication status.
        $status = $item['bibo_publication_status']['status'];
        if (empty(_bibo_get_default_publication_statuses()[$status])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'bibo_publication_invalid_status',
            'message' => t('%name: Publication status is invalid (%status).', array(
              '%name' => $instance['label'],
              '%status' => $status,
            )),
          );
        }
        // Validate partial date.
        $year = $item['bibo_publication_status']['year'];
        $month = $item['bibo_publication_status']['month'];
        $day = $item['bibo_publication_status']['day'];
        $date_format = empty($year) ? '' : 'Y';
        $date_format .= empty($month) ? '' : '-m';
        $date_format .= empty($day) ? '' : '-d';
        switch ($date_format) {
          case 'Y-m-d':
          case 'Y-m':
          case 'Y':
            $date = empty($year) ? '' : $year;
            $date .= empty($month) ? '' : '-' . sprintf('%02d', $month);
            $date .= empty($day) ? '' : '-' . sprintf('%02d', $day);
            $dt = DateTime::createFromFormat($date_format, $date);
            if (!$dt || $dt->format($date_format) != $date) {
              // Invalid date.
              $errors[$field['field_name']][$langcode][$delta][] = array(
                'error' => 'bibo_publication_invalid_date',
                'message' => t('%name: Published date is invalid (%date).', array(
                  '%name' => $instance['label'],
                  '%date' => $date,
                )),
              );
            }
            break;

          case '':
            break;

          default:
            // Invalid date format.
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'bibo_publication_invalid_date_format',
              'message' => t('%name: Published date format is invalid (%format).', array(
                '%name' => $instance['label'],
                '%format' => $date_format,
              )),
            );
        }
        // Validate status and date combination.
        if ($status == 'published' && $date_format == '') {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'bibo_publication_status_invalid_status_date',
            'message' => t('%name: Published status requires a date.', array(
              '%name' => $instance['label'],
            )),
          );
        }
        if ($status != 'published' && $date_format != '') {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'bibo_publication_status_invalid_status_date',
            'message' => t('%name: Non-published status requires an empty date.', array(
              '%name' => $instance['label'],
            )),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function bibo_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (empty($items)) {
    return;
  }

  // Contribution field presave.
  if ($field['type'] == 'bibo_contribution' && array_key_exists('bibo_contribution', $items[0])) {
    foreach ($items as $delta => $item) {
      $items[$delta]['bibo_contributor_id'] = $item['bibo_contribution']['bibo_contributor_id'];
      $items[$delta]['bibo_contribution_role'] = $item['bibo_contribution']['bibo_contribution_role'];
    }
  }

  // Publication status field presave.
  if ($field['type'] == 'bibo_publication_status' && array_key_exists('bibo_publication_status', $items[0])) {
    foreach ($items as $delta => $item) {
      $items[$delta]['status'] = $item['bibo_publication_status']['status'];
      $items[$delta]['year'] = $item['bibo_publication_status']['year'];
      $items[$delta]['month'] = $item['bibo_publication_status']['month'];
      $items[$delta]['day'] = $item['bibo_publication_status']['day'];
    }
  }
}

/**
 * Implements hook_field_settings_form().
 */
function bibo_field_settings_form($field, $instance, $has_data) {
  $form = array();

  // Publication status field settings form.
  if ($field['type'] == 'bibo_publication_status') {
    $settings = $field['settings'];
    $form['year_range'] = array(
      '#type' => 'fieldset',
      '#title' => t('Allowed year range'),
      '#prefix' => '<div class="container-inline">',
      '#suffix' => '</div>',
    );
    $form['year_range']['minimum'] = array(
      '#type' => 'textfield',
      '#title' => t('Minimum'),
      '#default_value' => $settings['year_range']['minimum'],
      '#size' => 4,
      '#maxlenght' => 4,
      '#required' => TRUE,
    );
    $form['year_range']['maximum'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum'),
      '#default_value' => $settings['year_range']['maximum'],
      '#size' => 4,
      '#maxlenght' => 4,
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function bibo_field_instance_settings_form($field, $instance) {
  $form = array();

  // Contribution field instance settings form.
  if ($field['type'] == 'bibo_contribution') {
    $settings = $instance['settings'];
    $form['allowed_roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Allowed contribution roles'),
      '#options' => _bibo_get_default_contribution_roles(),
      '#default_value' => $settings['allowed_roles'],
      '#required' => FALSE,
      '#description' => t('Select the allowed roles for this particular contribution field instance.'),
    );
  }

  // Publication status field instance settings form.
  if ($field['type'] == 'bibo_publication_status') {
    $settings = $instance['settings'];
    $form['allowed_statuses'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Allowed publication statuses'),
      '#options' => _bibo_get_default_publication_statuses(),
      '#default_value' => $settings['allowed_statuses'],
      '#required' => FALSE,
      '#description' => t('Select the allowed statuses for this particular field instance.'),
    );
    $form['allowed_statuses']['published']['#disabled'] = TRUE;
    $form['allowed_statuses']['unpublished']['#disabled'] = TRUE;
    $form['#element_validate'] = array('_bibo_publication_status_validate');
  }

  return $form;
}

/**
 * Validation callback to force published / unpublished values.
 */
function _bibo_publication_status_validate($form, &$form_state) {
  $form_state['values']['instance']['settings']['allowed_statuses']['published'] = 'published';
  $form_state['values']['instance']['settings']['allowed_statuses']['unpublished'] = 'unpublished';
}

/**
 * Helper function to build list of default contribution roles.
 */
function _bibo_get_default_contribution_roles() {
  // Default contribution roles.
  $roles = array(
    'author' => t('Author'),
    'editor' => t('Editor'),
    'translator' => t('Translator'),
    'book_author' => t('Book author'),
    'thesis_supervisor' => t('Thesis supervisor'),
  );

  return $roles;
}

/**
 * Helper function to get list of default publication statuses.
 */
function _bibo_get_default_publication_statuses() {
  // Default publication statuses.
  $statuses = array(
    'published' => t('Published'),
    'in_press' => t('In press'),
    'accepted' => t('Accepted'),
    'submitted' => t('Submitted'),
    'unpublished' => t('Unpublished'),
  );

  return $statuses;
}

/**
 * Implements hook_field_widget_info().
 */
function bibo_field_widget_info() {
  $widget_info = array();

  // Contribution default widget information.
  $widget_info['bibo_contribution_widget_default'] = array(
    'label' => t('Default'),
    'field types' => array('bibo_contribution'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  // Publication status default widget information.
  $widget_info['bibo_publication_status_widget_default'] = array(
    'label' => t('Default'),
    'field types' => array('bibo_publication_status'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widget_info;
}

/**
 * Implements hook_field_widget_form().
 */
function bibo_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element = array();

  // Contribution default widget form.
  if ($instance['widget']['type'] == 'bibo_contribution_widget_default') {
    // Inline container for the widget.
    $element['bibo_contribution']['#prefix'] = '<div class="container-inline">';
    $element['bibo_contribution']['#suffix'] = '</div>';

    // Contributor.
    $element['bibo_contribution']['bibo_contributor_id'] = array(
      '#type' => 'textfield',
      '#element_validate' => array('bibo_contribution_autocomplete_validate'),
      '#autocomplete_path' => 'bibo_contribution/autocomplete',
    );
    
    if (isset($form_state['values']) && isset($form_state['values'][$field['field_name']][$langcode][$delta])
      && isset($form_state['values'][$field['field_name']][$langcode][$delta]['bibo_contribution']['bibo_contributor_id'])) {
      $id = $form_state['values'][$field['field_name']][$langcode][$delta]['bibo_contribution']['bibo_contributor_id'];
      $entity = entity_load('bibo_contributor', array($id));
      $entity = empty($entity) ? NULL : bibo_contributor_label($entity[$id]) . ' [' . $id . ']';
      $element['bibo_contribution']['bibo_contributor_id']['#value'] = $entity;
    }
    else if (isset($items[$delta]['bibo_contributor_id'])) {
      $id = $items[$delta]['bibo_contributor_id'];
      $entity = entity_load('bibo_contributor', array($id));
      $entity = empty($entity) ? NULL : bibo_contributor_label($entity[$id]) . ' [' . $id . ']';
      $element['bibo_contribution']['bibo_contributor_id']['#default_value'] = $entity;
    }

    // Contribution role.
    $roles = _bibo_get_default_contribution_roles();
    $roles = array_intersect_key($roles, array_filter($instance['settings']['allowed_roles']));
    $element['bibo_contribution']['bibo_contribution_role'] = array(
      '#type' => 'select',
      '#options' => $roles,
      '#default_value' => isset($items[$delta]['bibo_contribution_role']) ? $items[$delta]['bibo_contribution_role'] : NULL,
    );

    // Remove button.
    if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
      $element['bibo_contribution']['remove_button'] = array(
        '#type' => 'button',
        '#value' => t('Remove'),
        '#name' => drupal_html_class(
          'remove-' . $field['field_name'] . '-' . $langcode . '-' . $delta
        ),
        '#submit' => 'bibo_multivalue_item_ajax_callback',
        '#ajax' => array('bibo_multivalue_item_ajax_callback'),
        '#limit_validation_errors' => array(),
        '#field_name' => $field['field_name'],
        '#langcode' => $langcode,
        '#delta' => $delta,
        '#field_remove_item' => TRUE,
      );
    }
  }

  // Publication status field widget form.
  if ($instance['widget']['type'] == 'bibo_publication_status_widget_default') {
    $values = array();
    if (isset($form_state['complete form'][$field['field_name']][$langcode][$delta])) {
      // Initial values from $form_state['complete_form'].
      $previous = $form_state['complete form'][$field['field_name']][$langcode][$delta]['bibo_publication_status'];
      $values = array(
        'status' => $previous['status']['#value'],
        'year' => $previous['year']['#value'],
        'month' => $previous['month']['#value'],
        'day' => $previous['day']['#value'],
      );
    }
    else if (isset($items[$delta])) {
      // Initial values from existing field data.
      $values = isset($items[$delta]['bibo_publication_status']) ? $items[$delta]['bibo_publication_status'] : $items[$delta];
    }
    if (!isset($values['status'])) {
      // Default initial values.
      $values = array(
        'status' => 'unpublished',
        'year' => 0,
        'month' => 0,
        'day' => 0,
      );
    }

    // Inline container for the widget.
    $element['bibo_publication_status']['#prefix'] = '<div class="container-inline" id="publication-status-' . $delta . '">';
    $element['bibo_publication_status']['#suffix'] = '</div>';

    // Status.
    $allowed_statuses = array_intersect_key(_bibo_get_default_publication_statuses(), array_filter($instance['settings']['allowed_statuses']));
    $element['bibo_publication_status']['status'] = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#options' => $allowed_statuses,
      '#default_value' => $values['status'],
      '#ajax' => array(
        'callback' => 'bibo_publication_status_ajax_callback',
        'wrapper' => 'publication-status-' . $delta,
        'method' => 'replace',
      ),
      '#field_name' => $field['field_name'],
      '#delta' => $delta,
    );
    if ($instance['required']) {
      $element['bibo_publication_status']['status']['#title'] .= " " . theme('form_required_marker');
    }

    // Partial date (year).
    $year_access = ($values['status'] == 'published');
    $year_range = $field['settings']['year_range'];
    $element['bibo_publication_status']['year'] = array(
      '#type' => 'select',
      '#options' => array(0 => '--') + date_years($year_range['minimum'], $year_range['maximum'], TRUE),
      '#default_value' => $values['year'],
      '#access' => $year_access,
      '#ajax' => array(
        'callback' => 'bibo_publication_status_ajax_callback',
        'wrapper' => 'publication-status-' . $delta,
        'method' => 'replace',
      ),
      '#field_name' => $field['field_name'],
      '#delta' => $delta,
    );
    if (!$year_access) {
      $element['bibo_publication_status']['year']['#value'] = 0;
    }

    // Partial date (month).
    $month_access = $year_access && $values['year'] != 0;
    $element['bibo_publication_status']['month'] = array(
      '#type' => 'select',
      '#options' => array(0 => '--') + date_month_names(TRUE),
      '#default_value' => $values['month'],
      '#access' => $month_access,
      '#ajax' => array(
        'callback' => 'bibo_publication_status_ajax_callback',
        'wrapper' => 'publication-status-' . $delta,
        'method' => 'replace',
      ),
      '#field_name' => $field['field_name'],
      '#delta' => $delta,
    );
    if (!$month_access) {
      $element['bibo_publication_status']['month']['#value'] = 0;
    }

    // Partial date (day).
    $day_access = $month_access && $values['month'] != 0;
    $element['bibo_publication_status']['day'] = array(
      '#type' => 'select',
      '#options' => array(0 => '--') + date_days(TRUE, $values['month'], $values['year']),
      '#default_value' => $values['day'],
      '#access' => $day_access,
    );
    if (!$day_access) {
      $element['bibo_publication_status']['day']['#value'] = 0;
    }

    // Remove button.
    if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
      $element['bibo_publication_status']['remove_button'] = array(
        '#type' => 'button',
        '#value' => t('Remove'),
        '#name' => drupal_html_class(
          'remove-' . $field['field_name'] . '-' . $langcode . '-' . $delta
        ),
        '#submit' => 'bibo_multivalue_item_ajax_callback',
        '#ajax' => array('bibo_multivalue_item_ajax_callback'),
        '#limit_validation_errors' => array(),
        '#field_name' => $field['field_name'],
        '#langcode' => $langcode,
        '#delta' => $delta,
        '#field_remove_item' => TRUE,
      );
    }
  }

  return $element;
}

/**
 * AJAX callback for the publication status widget.
 */
function bibo_publication_status_ajax_callback($form, $form_state) {
  $field_name = $form_state['triggering_element']['#field_name'];
  $langcode = $form[$field_name]['#language'];
  $delta = $form_state['triggering_element']['#delta'];
  $element = $form[$field_name][$langcode][$delta]['bibo_publication_status'];

  return $element;
}

/**
 * Implements hook_form_alter().
 *
 * This is needed to remove items from a form using the 'Remove' button.
 */
function bibo_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['triggering_element']['#field_remove_item'])) {
    $field_name = $form_state['triggering_element']['#field_name'];
    $language = $form_state['triggering_element']['#langcode'];
    $delta = $form_state['triggering_element']['#delta'];
    if (!isset($form_state['#field_remove_item'])) {
      $form_state['#field_remove_item'] = array();
    }
    // Keep track of this removal.
    $form_state['#field_remove_item'][$field_name][$language][] = $delta;
  }
  // Remove all items again in case the form submission fails validation.
  if (!empty($form_state['#field_remove_item'])) {
    foreach ($form_state['#field_remove_item'] as $field_name => $field_values) {
      foreach ($field_values as $language => $field_deltas) {
        foreach ($field_deltas as $delta) {
          bibo_multivalue_item_remove_element($form, $form_state, $field_name, $language, $delta);
        }
      }
    }
  }
}

/**
 * AJAX callback for the 'Remove' button.
 */
function bibo_multivalue_item_ajax_callback(&$form, $form_state) {
  $config = bibo_multivalue_item_ajax_remove($form, $form_state);
  $wrapper = '.' . $config['wrapper'];

  // Only render the piece of form that we want depending on the parents.
  $element = $form;
  foreach ($config['array_parents'] as $name) {
    $element = &$element[$name];
    if (!empty($element[$config['field_name']])) {
      break;
    }
  }

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace($wrapper, render($element[$config['field_name']])),
    ),
  );
}

/**
 * Recursively look for the elements to remove in the form array.
 */
function bibo_multivalue_item_ajax_remove(&$element, &$form_state) {
  $config = array();

  $children = element_children($element);
  if (count($children)) {
    foreach ($children as $childname) {
      if (isset($element['#field_remove_item']) && in_array($childname, array_keys($form_state['#field_remove_item']))) {
        return array(
          'array_parents' => $element['#array_parents'],
          'wrapper' => $element['#field_remove_item']['wrapper'],
          'field_name' => $element['#field_remove_item']['field_name'],
        );
      }
      $config = bibo_multivalue_item_ajax_remove($element[$childname], $form_state);
    }
  }

  return $config;
}

/**
 * Remove the field items recursively.
 */
function bibo_multivalue_item_remove_element(&$element, &$form_state, $field_name, $language, $delta) {
  $children = element_children($element);
  if (count($children)) {
    foreach ($children as $childname) {
      if (is_array($element[$childname])) {
        bibo_multivalue_item_remove_element($element[$childname], $form_state, $field_name, $language, $delta);
      }
      if ($childname === $field_name) {
        $element['#field_remove_item'] = array(
          'wrapper' => $element[$field_name]['#attributes']['class'][1],
          'field_name' => $field_name,
        );
        // Remove field item.
        unset($element[$field_name][$language][$delta]);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function bibo_field_formatter_info() {
  $formatter_info = array();
  
  // Contribution default formatter information.
  $formatter_info['bibo_contribution_formatter_default'] = array(
    'label' => t('Default'),
    'field types' => array('bibo_contribution'),
    'settings' => array(
      'name_format' => 'full_name',
      'display_link' => TRUE,
      'display_role' => TRUE,
    ),
  );

  // Publication status default formatter information.
  $formatter_info['bibo_publication_status_formatter_default'] = array(
    'label' => t('Default'),
    'field types' => array('bibo_publication_status'),
  );

  return $formatter_info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function bibo_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  // Contribution default formatter settings form.
  if ($display['type'] == 'bibo_contribution_formatter_default') {
    // Name format
    $element['name_format'] = array(
      '#title' => t('Name format'),
      '#type' => 'select',
      '#options' => array(
        'abbreviated_name' => t('Abbreviated name'),
        'full_name' => t('Full name'),
      ),
      '#default_value' => $settings['name_format'],
    );
    // Link to contributor.
    $element['display_link'] = array(
      '#title' => t('Link to contributor'),
      '#type' => 'checkbox',
      '#default_value' => $settings['display_link'],
    );
    // Display / Hide role.
    $element['display_role'] = array(
      '#title' => t('Display contribution role'),
      '#type' => 'checkbox',
      '#default_value' => $settings['display_role'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function bibo_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  // Contribution default formatter settings summary.
  if ($display['type'] == 'bibo_contribution_formatter_default') {
    $name_formats = array(
      'abbreviated_name' => t('Abbreviated name'),
      'full_name' => t('Full name'),
    );
    $summary[] = 'Name format: ' . $name_formats[$settings['name_format']];
    $summary[] = $settings['display_link'] ? t('Display link') : t('No link');
    $summary[] = $settings['display_role'] ? t('Display role') : t('Hide role');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function bibo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Contribution default formatter view.
  if ($display['type'] == 'bibo_contribution_formatter_default') {
    $roles = _bibo_get_default_contribution_roles();
    foreach ($items as $delta => $item) {
      $id = $item['bibo_contributor_id'];
      $bibo_contributor = entity_load('bibo_contributor', array($id));
      if (!empty($bibo_contributor)) {
        // Name format.
        switch ($display['settings']['name_format']) {
          case 'abbreviated_name':
            $item_output = $bibo_contributor[$id]->name;
            break;
          case 'complete_name':
          default:
            $item_output = bibo_contributor_label($bibo_contributor[$id]);
            break;
        }
        // Link to contributor.
        if ($display['settings']['display_link']) {
          $item_output = l($item_output, entity_uri('bibo_contributor', $bibo_contributor[$id])['path']);
        }
        // Display role.
        if ($display['settings']['display_role']) {
          $role = $item['bibo_contribution_role'];
          $item_output .= ' (' . $roles[$role] . ')';
        }
        $element[$delta]['bibo_contribution_row']['content'] = array(
          '#markup' => $item_output,
        );
      }
    }
  }

  // Publication status default formatter view.
  if ($display['type'] == 'bibo_publication_status_formatter_default') {
    foreach ($items as $delta => $item) {
      $publication_statuses = _bibo_get_default_publication_statuses();
      $item_output = $publication_statuses[$item['status']];
      if ($item['status'] == 'published') {
        $item_output .= empty($item['year']) ? '' : ' (' . $item['year'];
        $item_output .= empty($item['month']) ? '' : '-' . $item['month'];
        $item_output .= empty($item['day']) ? '' : '-' . $item['day'];
        $item_output .= ')';
      }
      $element[$delta]['bibo_publication_status_row']['content'] = array(
        '#markup' => $item_output,
      );
    }
  }

  return $element;
}

/**
 * Implements hook_theme_registry_alter().
 */
function bibo_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'bibo');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_views_api().
 */
function bibo_views_api($module = NULL, $api = NULL) {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'bibo') . '/views',
  );
}

/**
 * Include all files here to prevent undefined functions.
 */
module_load_include('inc', 'bibo', 'bibo_contributor');
module_load_include('inc', 'bibo', 'bibo_work');
module_load_include('inc', 'bibo', 'bibo_work_type');
