<?php
/**
 * @file
 * BIBO internationalization.
 */

/**
 * Implements hook_entity_info_alter().
 */
function bibo_i18n_entity_info_alter(&$info) {
  // Enable i18n support via the entity API.
  $info['bibo_work_type']['i18n controller class'] = 'EntityDefaultI18nStringController';
}

/**
 * Implements hook_entity_property_info_alter().
 */
function bibo_i18n_entity_property_info_alter(&$info) {
  // Mark some properties as translatable, but also denote that translation
  // works with i18n_string.
  foreach (array('label', 'description') as $name) {
    $info['bibo_work_type']['properties'][$name]['translatable'] = TRUE;
    $info['bibo_work_type']['properties'][$name]['i18n string'] = TRUE;
  }
}

/**
 * Implements hook_bibo_work_type_insert().
 */
function bibo_i18n_bibo_work_type_insert($entity) {
  i18n_string_object_update('bibo_work_type', $entity);
}

/**
 * Implements hook_bibo_work_type_update().
 */
function bibo_i18n_bibo_work_type_update($entity) {
  if ($entity->original->type != $entity->type) {
    i18n_string_update_context("bibo:work_type:{$entity->original->type}:*", "bibo:work_type:{$entity->type}:*");
  }
  i18n_string_object_update('bibo_work_type', $entity);
}

/**
 * Implements hook_bibo_work_type_delete().
 */
function bibo_i18n_bibo_work_type_delete($entity) {
  i18n_string_object_remove('bibo_work_type', $entity);
}
