<?php

/**
 * Implements hook_entity_info_alter().
 */
function bibo_apa_entity_info_alter(&$entity_info) {
  $entity_info['bibo_work']['view callback'] = 'bibo_apa_view_callback';
  $entity_info['bibo_work']['view modes']['citation'] = array(
    'label' => t('Citation'),
    'custom settings' => FALSE,
  );
  $entity_info['bibo_work']['view modes']['reference'] = array(
    'label' => t('Reference'),
    'custom settings' => FALSE,
  );
}

/**
 * Helper function to intercept bibo_apa view modes.
 */
function bibo_apa_view_callback($entities, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  // Don't interfere with default view mode.
  if ($view_mode == 'default' || $view_mode == 'full') {
    return entity_get_controller('bibo_work')->view($entities, $view_mode, $langcode, $page);
  }
  // Prepare APA view mode.
  $entities = entity_key_array_by_property($entities, 'bibo_work_id');
  field_attach_prepare_view('bibo_work', $entities, $view_mode);
  entity_prepare_view('bibo_work', $entities);
  $langcode = isset($langcode) ? $langcode : $GLOBALS['language_content']->language;

  $view = array();
  foreach ($entities as $entity) {
    $build = array(
      '#theme' => 'bibo_apa_' . $view_mode,
      '#entity' => $entity,
      '#language' => $langcode,
    );
    // Allow modules to modify the structured entity.
    $key = isset($entity->bibo_work_id) ? $entity->bibo_work_id : NULL;
    $view['bibo_work'][$key] = $build;
  }
  return $view;
}

/**
 * Implements hook_theme().
 */
function bibo_apa_theme() {
  return array(
    'bibo_apa_citation' => array(
      'file' => 'bibo_apa.module',
      'variables' => array(
        'entity' => '',
        'language' => '',
      ),
    ),
    'bibo_apa_reference' => array(
      'file' => 'bibo_apa.module',
      'variables' => array(
        'entity' => '',
        'language' => '',
      ),
    ),
  );
}

/**
 * Implements theme_HOOK().
 */
function theme_bibo_apa_citation($variables) {
  $entity = $variables['entity'];
  $output = '(';

  // Build list of authors (last name or organization name).
  $authors = array();
  if (isset($entity->bibo_contributors[LANGUAGE_NONE])) {
    foreach ($entity->bibo_contributors[LANGUAGE_NONE] as $contributor) {
      if ($contributor['bibo_contribution_role'] == 'author') {
        $author = bibo_contributor_load($contributor['bibo_contributor_id']);
        if ($author->type == 'person') {
          $authors[] = $author->bibo_full_name[LANGUAGE_NONE][0]['family'];
        }
        else {
          $authors[] = $author->name;
        }
      }
    }
    $output .= implode(', ', $authors);
    if (!empty($authors)){
      $output .= ', ';
    }
  }

  // Get publication status / year.
  $year = '';
  if (isset($entity->bibo_publication_status[LANGUAGE_NONE])) {
    $year = $entity->bibo_publication_status[LANGUAGE_NONE][0]['year'];
    if (!$year) {
      $year = _bibo_get_default_publication_statuses($entity->bibo_publication_status[LANGUAGE_NONE][0]['status']);
    }
  }
  $output .= $year;

  return $output . ')';
}

function theme_bibo_apa_reference($variables) {
  $entity = $variables['entity'];

  // TODO: Render work APA reference.

  return 'BIBO APA reference';
}
